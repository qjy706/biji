1 运算符　
    １．位运算符　
        程序中的数据在计算机中都是以二进制形式存储的　，位运算实际上是对二进制的每一位进行操作　
        １．按位与　：　& 
            将操作数转换二进制之后，按位与，1相同则为１，0相同则为0,不同则为０　
            et: 
                3 & 5
                011 & 101 
                001
            使用：　常用于判断整数的奇偶，将一个操作数与１做位与，结果为１，该操作数为奇数，结果为０　，说明操作数为偶数　
            011 001 
            101 001



        2.  按位或 : |
                将操作数转换为二进制之后，做位或
                et 
                    3|5
                    011　　　　　
                    101     
                ------------------
                    111

        3.  按位异或 : ^ 

            两位不同则为１，相同则为０　
            3^5 = 6
            011
            101
            -----
            110
            异或操作可以在不借助三方变量的情况下互换两个变量的值　
            var a = 3,b=5;
            a=a^b; //6
            b=a^b; //3
            a=a^b; // 5


    2.  三目(元)运算符
        语法：
            表达式１　？　表达式２　：　表达式３

        使用：
            １．判断表达式１的结果　
            ２．如果表达式１结果为true ，执行表达式２，
            ３．如果表达式１结果为false，执行表达式３．

            练习　
                接收用户输入的成绩
                判断成绩等级
                score >= 90 优秀
                80 <= score < 90 良好
                60 <= score < 80 及格
                score < 60 不及格

                提示用户当前成绩


            练习２　
                1. BMI 身体指数计算
                ２．接收用户输入，身高，体重　
                ３．bmi =　体重　/　（身高*身高）　
                4. bmi  < 18.5 偏瘦
                        > 23.9 偏胖
                        介于中间，健康　
表达式１？　表达式２　：　表达式３

2   流程控制
        控制代码的执行顺序　
        流程控制语句　：　
            １．顺序结构：代码自上至下一行一行执行

            ２．选择结构（分支）

            ３．循环结构

        １．选择结构　
            根据条件判断的结果选择执行某一段代码
            1   语法　：
                １．if(判断条件){
                            条件为真时执行的代码段,
                            条件为假时，会跳过
                }
                注意　：　
                    １．{}　可以省略，省略之后，认为if()后面的第一条语句是条件成立时待执行的语句

                    2.  判断条件必须是布尔类型的结果
                    ３．　非零值都为真，零为假
                            以下条件都为假：
                            　if(0){}
                            if(0.0){}
                            if(''){}
                            if(NaN){}
                            if(underfinded){}
                            if(null){}

                2.  if-else语句
                    语法：
                        if(条件){
                            条件为真时执行
                            }else {
                                条件为假时执行
                            }

                    et:
                        var a = 20;
                        if (a>18){
                            console.log('成年人可以进网吧')
                            }else{
                            console.log('未成年禁止入内')
                            }

                3.  if-else if语句
                        多重分支结构
                        if(条件１){
                        条件１成立时执行
                        }else if(条件２){
                            条件２成立时执行
                        }else if(){

                        }else(){
                            条件不满足时执行　
                        }
                    1.成绩等级判定
                    ２．日期计算器
                        １，接收用户输入，年　月　日　
                            判断用户输入的日期是当年的第几天
                            et 
                                2018-1-15
                                2018-10-15
                            实现　：
                                １．将当前月之前的整月天数累加
                                ２．加上当前月的天数
                                ３．当年年份是否是闰年


            2.  switch语句
                语法　：
                    switch(值){
                        case 1:
                            值匹配恒等时，执行的语句
                            break;
                        case 2:
                            值匹配恒等时，执行的语句
                            break;
                        ....
                        default : 
                            待执行的语句
                    }

                    注意　：　
                        １．　switch一般用于值的匹配
                            ()中表示的是值

                        ２　　case 可以使用多个，每个case对应一种情况
                        case　后面写要匹配的值 

                        ３．case后面直接写要对应匹配的值　
                            et:
                                var a = 10;
                                switch(a){
                                    case 1 :
                                    当前值是否匹配１
                                    console.log(a);
                                }

                        4.  如果case给出的值匹配成功，执行当前case：
                        后面的语句

                        ５． break 用于跳出匹配，不再向下执行　

                        ６．default 表示所有的case都匹配失败之后默认执行　
                            １．default 关键字一般写在switch的末尾，匹配失败 之后最终执行的操作，可以省略　

                            ２．break 表示跳出switch语句，可以省略，如果省略break，会从当前匹配到的case开始向后依次执行所有的语句

                            ３．case关键字，可以共用代码语句
                                et:
                                    case 1:
                                    case 2:
                                    case 3:
                                        console.log();
                                        break

                        练习　：
                            改版日期计算器

            3.循环结构　：
                重复执行某一段代码　
                １．循环语句的三要素　
                    １．循环变量
                    ２．循环条件
                    ３．循环体
                ２．语法：
                    １．while 循环
                        while(循环条件){
                            条件成立时，执行循环体}　
                    执行流程　：
                        １．定义循环变量
                        ２．判断循环条件
                        ３，条件成立，执行循环体
                        ４，更新循环变量（重点）
                        ５，重复步骤　2 - 3 - 4 直到条件不成立，跳出循环
                    练习　：
                        １．输出　１－１００之间的数字　
                        ２．计算　１－１００的和
                        ３．输出　１－１００之间所有３的倍数

                    2.  do-while循环
                            do{
                            //循环体
                            }while(循环条件)

                        执行流程：
                            １．定义循环变量
                            ２．执行do操作，循环体
                            ３．循环体中更新循环变量
                            ４．判断循环条件，决定是否继续执行循环体
                        特点：　
                            do-whlie 循环不管条件是否成立，都至少执行一次循环体
                        练习　：　
                            循环接收用户输入，并在控制台输出: 
                            直到用户输入'exit'，结束循环

                        练习２　
                            使用while循环　改版日期计算器



                    3.  for循环　
                        for(定义循环变量；循环条件；更新循环变量;){
                            //循环体
                            }
                        et:
                            for(var i = 1; i < 101;i++){
                                console.log(i);
                            }

                        for循环与whlie循环　:
                            1.循环的执行流程相同
                            ２．for循环常用于确定循环次数的场合
                                while循环常用于不确定循环次数的场合

                    4.  循环控制
                        1.continue 跳出本次循环　开始下一次循环　
                        2.break     结束循环

                        练习　：
                            １　判断素数　（质数）
                                只能被１和自身整除的数是质数
                                接收用户输入的数字，判断是否为素数

                            ２．日期计算器


            4.  循环嵌套
                可以再循环中再次嵌套其他循环
                for(var i = 0;i < 10;i++){
                    for(var j = 0;j < 10; j++){

                    }
                }



                练习　
                    １．在控制台中输出以下图像
                        *               
                        **
                        ***
                        ****
                        *****

                    2 
                    *
                   ***
                  *****
                 *******
                *********






