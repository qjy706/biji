1 JS组成　
    １．ECMAScript - JS 的核心语法　
    ２．内置对象 - BOM DOM 


    １． 元素绑定
        给具体的元素绑定JS的事件
        事件　：　由用户行为触发的操作　,　(鼠标操作，键盘操作)
        语法　：　
            <标签　事件函数名='JS代码'>
            et:
                onclick : 单击事件
                alert('') : 网页弹框显示提示信息
                <h1 onclick="alert('Hello');">

    ２．文档内嵌　
        使用<script></script>在文档中嵌入JS代码
        可以书写在任意位置，出现任意多次
        常用的JS语句 ：
        alert(""); 
        console.log("在控制台输出一句话"); console.log
        e.t
            <script type="text/javascript">
                alert("文档内嵌");
            </script>
        可以出现在任意位置　，但是位置会影响执行效果
        阻塞型语言

    ３．外部ＪＳ文件　
        １．创建外部.js文件
        ２．使用script标签引入外部的JS文件　
             <script type="text/javascript" src='.js'></script>
             注意　：　script 标签用来引入外部文件时，标签中不能再书写js代码

    ４．  常用JS语句

        １．alert('') : 以警告框的形式提示信息
        ２．prompt('')　：接收用户输入的弹框，输入结果会以函数返回值的形式给出
                        
        ３．console.log('') : 在控制台输出，常用于调试
        ４．document.write('') : 在网页中输出

        注意　：
            1. document.write('') 方法会根据当前的书写位置在网页中插入内容
            #２．如果以元素绑定事件的方式在网页中写入内容 onclick='document.write('');',会清空当前页，只显示写入的内容

            3. 使用document.write('')方法写入内容，可以识别html标签　


　　　　
　语句以分号结尾
３．　JS基础语法　 
    １．JS代码是由语句组成的，每一条语句以分号结尾;
        语句是由关键字，运算符，表达式组成的　

    ２．JS代码严格区分大小写，

    ３．所有标点符号都是英文

    ４．JS中的注释，//单行注释　　/*  */多行注释　



４．JS中变量与常量　
    １．变量：
        １．创建变量
            １．先声明，后赋值
                使用var关键字进行变量的申明
                使用＝进行变量的赋值
                自定义变量名
                et:
                    var a;
                    a = 10; 讲右边的值赋给左边变量　先声明　后赋值　
                et2:
                    var b,c,d;  同时声明多个变量　
                    b=100;

            ２．声明的同时赋值　
                et: 
                    var age=20;
                    var q=100,as=12;

        2.  命名规范　
            １，由数字，字母，下划线和　$组成　，禁止以数字开头
            ２，避免与关键字，保留字冲突　(name var new for if do while function class break switch....)

            3.  做到见名知意　
            4.  严格区分大小写　
            5.  多个单词组成的变量名，采用小驼峰标识　
                et:
                    goodsCount
                    goodsPrice
                    userName
                    userId
var a=;
        3.  使用注意：

            １．变量声明可以省略关键字var,直接使用变量名赋值，不推荐省略关键字，涉及到变量作用域．

            ２．变量如果只声明，未赋值，默认值为undefined　

            ３．赋值符号表示将右边的值赋给左边变量，要求左边必须是变量．
                et:
                    var a = 10;
                    a = 10+10;
                    100 = a + a;

    2.  常量
        变量可以在程序任何地方修改
        常亮一经定义就不能更改
        １　创建　
            使用　const 关键字创建常量，声明的同时必须赋值　

        ２　语法规范　
            为了区分变量与长量，一般变量名采用小写或驼峰标识
            常量采用全大写的形式
            et:
                const PI = 3.14;


            练习　：
                １．定义常量PI，3.14
                ２．定义变量　r,表示半径
                ３．计算圆的周长与面积并进行输出　

        3.  小数位的操作　
            １．小数在计算机的存储中是不精确的，存在误差
            ２．指定保留小数位
                方法　：　toFixed(n); n表示要保留的位数
                使用　：　
                    var num = 1.23456;
                    var res = num.toFixed(2); //返回最终的结果

５． JS中的数据类型　
    １．简单数据类型（基础）
        1.  number 类型
            数值类型，包含整数和小数

            整数在内存中占用４个字节（３２位），小数占８个字节(64位)
            １．整数
                可以使用十进制，八进制，十六进制表示整数
                八进制　：　以0开头，
                    ８为基数，取值0-7　逢８进１
                    var a = 010;
                    var b = 011;
                    八进制转十进制　，缝８进１
                    十进制转八进制，需要首先将十进制转为二进制　除２取余　直至商为０
                    从右向左，每三位为一组，转换数值，就是八进制　

                十六进制　：　0x 为前缀
                    et:
                        var c = 0x25;
                        十六进制转十进制　参考八进制　
                        十进制转十六进制，先将十进制转换二进制，从右向左，每四位为一组，不足位补０，计算数值　
            　　  注意　：　
                    不管是哪一种进制表示的整数，在使用控制台输出时都会转换为10进制输出显示

            2.  小数　
                也叫浮点数
                １．使用小数点，给出小数位
                    var a = 3.14;
                2. 使用科学计数法　
                    var b = 1.5e3; e表示十为底，3表示次方
                    计算方式　：
                            1.5 * 10(3)

        2.string 类型　
            1.  JS字符串使用引号引起来，单双引号都可以　
                et:
                    var a = 10;
                    var b = '10';

            2.  字符串中每个字符都有对应的Unicode码值
                １．查看字符的Unicode码　
                    方法　：　charCodeAt(index)
                    字符串中每个字符都对应有一个下标，从0开始
                    这个方法根据给定下标获取该字符的Unicode码

                2. Unicode码
                    Unicode码值中前128位与ASC码对应一致　


                3. 将汉字的Unicode码转换成
                    １．Unicode码转换成十六进制　
                        toString(16) : 将十进制数字转换为十六进制返回字符串

                    ２．在十六进制字符串前添加\u转义，转换为汉字

                ４．转义字符
                    \n 换行
                    \t 制表符
                    \\ 表示　\
                    \" 表示　"
                    \' 表示　'



        ３．boolean　布尔类型　
            练习　
            １．　用户输入年份　prompt()
                var year = prompt();
alert 警示弹框
            ２．　判断是否为闰年　
                不能被100整除　，但是可以被４整除　
                可以被４００整除　

                除法　使用　/表示　 使用取模　% (取余)
                Number(year);

                逻辑或　||　
                逻辑与　&& 

            只有真和假　true false, 表达式进行关系运算的结果
            一定是布尔类型
            true false 可以转换为number数值
            true = 1 
            false = 0 
            任何非零值都为零　

        4 underfined 
            1.  变量声明未赋值，默认为underfined 
            2.  访问对象不存在的属性时，也为undefined 

        5 null
            空类型，一般用来接触对象的引用




    ２．复杂数据类型（引用）
        对象　函数　


    ３．判断
        操作符　typeof  ||  typeof()
        typeof(variable) | typeof variable
        var a = 10;
        console.log(typeof a);



6   JS中的数据类型转换　
    １．自动类型转换（隐士）
        １．number + string
            字符串使用+参与运算　都视为字符串的拼接，不在是数学运算　
            转换规则　：　将参与运算的非字符串类型，自动转换为string类型，再进行字符串拼接，返回最终字符串　
数字加字符串　数字自动转换成字符串
        2.  boolean + string
            布尔值转换成字符串　字符串相加

        3. number + boolean 
            转换成number
数字加布尔值　布尔值转换成数字　true 1  false 0
    2.强制类型转换  
        １．字符串转换number类型　
            １．Number(value) 　　Number(true) = 1
                可以将非数字类型转换为number 
                １.数字字符串 '100' 可以使用该方法转换类型　

                ２．包含非数字的字符串　'100a'，转换结果为NaN 
                    not a number,表示转换失败　

                ３．布尔类型转换number ,对应 １和０;

            ２．从字符串中解析数字
                １．parseInt(str)  小驼峰法
                    用来解析字符串中的整数，参数如果不是字符串，会自动转换为字符串再进行解析
                    只对字符串开头部分进行解析，如果首个字符不是数字，直接返回NAN

                2 parseFloat(str)
                    用来解析字符串中的整数和小数部分  也必须是字符串开头部分有浮点数　
                    parseFloat(true) NaN 把true看成了字符串

        2.  将非字符串类型转换为string类型
                方法 : toString();
                使用　：　
                    var a = 100;
                    var res = a.toString();

7   运算符　
    １．算术运算符　
         + - * / % 
         ++ -- 自增　自减运算

        １．+ - * / %
            1.字符串+ 表示拼接
            2.数字字符串参与数学运算　(- * / %)
                会自动转换数据类型，转成number后参与运算
                非数字字符串，转换number结果都为NaN
                参与数学运算结果也为Nan


        2.  ++ -- 
            1.自增运算符，自减运算符，表示在自身基础上进行+1 或-1
            2.只有变量能使用++ -- ,常量不能自增或自减
            3.单独使用++ -- 与变量结合，做前缀或后缀没有区别　
                都是对变量进行+1 或　-1操作
                et:
                    var a = 10;
                    ++a;
                    a++;

            4.如果与其他运算符结合，前缀和后缀会影响结果
                et:
                    与赋值符号结合
                    var a = 10;
                    var r = a++; //先赋值，后a自增
                    var r1 = ++a; //a先自增，后赋值
                练习　
                    var n = 5;
                    var res = n++ + ++n + n++ + ++n +n;

                    r1 = 5    6 
                    r2 = r1+7 7 
                    r3 = r2+7 8
                    r4 = r3+9 9
                    r5 = r4+9 9



    2.  关系运算符（比较运算符）
         > >= < <= == !=  === !==
         1.数字与数字之间的比较
            et:
                var r = 10 > 5;

        2.字符串之间的比较
            1.string 与　number 之间进行关系运算：
                自动将string转换为number ,再进行比较：　
                如果srting 无法转换为number ,则进行NaN与number的比较
                结果永远为false

            2.string 与　string 之间进行关系运算
                进行每一位字符Unicode码值的比较　，从前往后
                如果第一位字符可以比较出结果，就直接获取结果，如果无法出结果，依次进行后一位字符的比较

            3.判断相等与恒等
                == 　判断相等，只进行值的比较，包含数据类型转换　
                === 判断恒等　　不允许数据类型转换，比较类型与值
                判断相等时，会发生自动类型转换，最终结果
                即为true
                判断恒等，要求操作数数据类型一致，值相等，才返回true

            4. 判断不等和不恒等
                != 判断不等，两个操作数的值不相等时返回true
                !== 判断不恒等，两个操作数类型与值之间只要有一项不同，都返回true

    3.逻辑运算　
        逻辑与　: &&
        逻辑或　：　||
        逻辑非　：　！
        逻辑运算与关系运算的结果都为布尔类型　

        １．逻辑与：
            两个表达式同时为真，逻辑运算的结果才为真
                条件１　　条件２　   结果
                true    true    true
                 false   true    false 
                 true    false   false 
            &&   false   false   false


        2 逻辑或
            两个条件，只要有一个为真，逻辑或的结果就为真　

        ３．逻辑非
            非真即假　对表达式的结果进行取非操作
            １．
                '1' 

        if(条件表达式){//条件成立时执行}








