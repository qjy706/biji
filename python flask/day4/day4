跳转网页　
window.location.href = 'http://www.tmooc.cn'
href = 'http://xxxxx'  '/自己的html文件'


1.  响应(response)
    1.  什么是相应　
        响应就是由服务器端带给客户端的内容，对应着请求．
        响应可以是普通的字符串，模板或重定向
        return '普通字符串'
        return render_template('xxx.html')

    2.  响应对象　
        将响应的内容封装到一个对象当中，可以完成更多的响应的行为(如：增加cookies..)
        封装思想　类似于快递手机　外面包裹一个盒子　


        在flask中，使用make_response()来构建响应对象　
        from flask import make_response
        @app.route('/xxx')
        def xxx():
            resp = make_response('响应内容')
            return resp

    3.  重定向　
        1.  什么是重定向
            由服务器端通知客户端重新向一个新的地址发送请求
            是一个响应　
            浏览器发送地址给服务器　重定向响应给浏览器　浏览器再去访问其他地址
            其他地址再将内容响应给客户端　
            第一次是第一个地址　第二次是第二个地址　
            302 状态码　临时重定向　
        2.  语法　
            form flask import redirect

            resp=redirect('重定向地址')

            借助resp实现其他的响应行为
            return resp


2.  文件上传
    1.  注意问题
        表单中如果有文件上传的话，必须遵循以下两个要求
        1.  提交方式　method 必须为　post
        2.  表单的enctype  属性的值　必须为　multipart/form-data

    2.  服务器端
        拿到东西后保存在指定目录　
        1.  通过　request.files 获取上传文件　
                varName = request.files['文件框的name值']

        2.  通过varName.save(保存路径) 将文件保存至指定目录处　
                通过　varName.filename 获取文件的名称
                varName.save('static/'+varName.filename)

        basedir = os.path.dirname(__file__)
        upload_path=os.path.join(basedir,'static/upload',filename)
        print(upload_path)
        f.save(upload_path)



3.  模型　- Models
    1.  什么是模型
        模型，是根据数据库中表的结构而创建出来的class
        每一张表对应到编程语言中，就是一个class
        表中的每一个列对应到编程语言中就class中的一个属性　　

    2.  模型的框架　-  ORM
        1.  什么是ORM
            Object Relational Mapping
            对象关系映射
            类与类　表与表的　关系　映射出来　

        2.  ORM的三大特征
            1.数据表(table)到编程类(class)的映射　
                数据库中的每一张表，对应到编程语言中，都有一个类　
                在ORM中　：
                    允许将数据表　自动　生成一个类　
                    允许将类　自动　生成一张数据表　

            2.  数据类型的映射　
                将数据库表中的字段以及数据类型　对应到　编程语言中类的属性　
                在　ORM中
                    允许将表中的字段和数据类型自动映射到编程语言中，也允许将类中的
                    属性和数据类型也自动映射到表中

            3.  关系映射
                将数据库中表与表之间的关系　
                1.  一对一
                    外键，主键，唯一约束　
                    A表中的一条数据只能与B表中的一条数据相关联　

                    一对一　使用外键约束，外加，唯一约束　
                    一张表中外键
                    另外一张关联属性　
                    重点看数据库表的查询　连接查询，子查询，表的关系　　


                2.  一对多　　用的最多　
                    外键，主键　
                    A表中的一条数据可以与B表中的任意多条数据相关联，
                    反之，b表中的一条数据，只能与A表中一条数据相关联　
                    一门课程可以被多个老师所教授
                    每个老师只能教授一门课程
                    多的表中添加外键　
                    一的表中添加关联属性和反向属性　
                    在多的那张表增加对一的引用　




                3.  多对多　
                    通过第三张关联表去关联两张表　

                    A表中的一条数据可以与B表中的任意多条数据相关联，
                    B表中的一条数据也可以与A表中的任意多条数据相关联　

                    学生和课程　

            er图

        3.  ORM的优点
            1.  封装类数据库中所有的操作，大大提高类开发效率　

            2.  可以省略庞大的数据访问层,即使不用SQL编码也能完成对数据的CRUD的操作


    3.  Flask中的ORM框架　
        1.  数据库和框架配置　
            在python　和　Flask 中，使用的ORM框架是-SQLAlchemy
            在Flask中想使用　SQLAlchemy的话，需要进行安装
                pip3 install sqlalchemy
                pip3 install flask-sqlalchemy


        2.  创建数据库　
            create database flask default charset utf8 collate
            utf8_general_ci;