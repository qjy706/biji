

db=SQLAlchemy(app)
1.  模型－Models
    1.定义模型
        模型：数据库中的表在编程语言中的体现，其本质就是一个python类(模型类　或　实体类)
        数据库中的一行：实体
        实体完整性　：　表中的记录不能完全重复　-主键　业务逻辑上不推荐改　语法上可以改


        语法　:
            class MODELNAME(db.model):

            __tablename__ = 'TABLENAME'
            COLUMN_NAME = db.Colum(db.TYPE,OPTIONS)　有表的情况下名称必须一模一样

        1.MODELNAME 定义模型类的名称,根据表名设定　
        2.TABLENAME : 映射到数据库中表的名称　数据库中没有该表则创建　
        3.COLUMN_NAME : 属性名，映射到表中就是列的名字　
        4.TYPE : 映射到列的数据类型　
        5.OPTIONS : 列选项　


        TYPE 列类型如下  需要db.type
            类型名　                python类型            说明
            Integer                 int                 普通整数，32位
            SmallInteger            int                 小范围整数，通常16位
            BigInteger              int或long            不限精度整数
            Float                   float               浮点数
            Numeric                 decimal.Decimal     定点数　
            String                  str                 变长字符串
            Text                    str                 变长字符串，优化　
            Unicode                 unicode             变长Unicode字符串
            UnicodeText             unicode             优化后的变长Unicode串　
            Boolean                 bool                布尔值
            Date                    datetime.date       日期
            Time                    datetime.time       时间
            DateTime                datetime.datetime   日期时间

        OPTIONS 列选项　
            选项名　                    说明
            primary_key                 如果设置为True表示该列为主键
            unique                      设置为True 表示该列值唯一
            index                       如果设置为True表示该列要创建索引
            nullable                    如果设置为True表示该列允许为空
            default                     表示该列的默认值　


        需要导入mysqldb数据库　

        １创建student模型类　
            表名　student
            1.id  主键　自增　
            2.sname 姓名　长度为30并且不允许为空的字符串
            3.sage 年龄　整数　

        ２   Teacher 模型类　
            表名　teacher
            字段　
                1.id 主键，自增
                2.tname 姓名　长度为30并且不允许为空的字符串
                3.tage 年龄　整数　

        3.  创建course 模型类
            表名　course
            字段　
                1.id 主键，自增
                2.cname 课程名称长度为30并且不允许为空的字符串　

    2.  数据库操作　- 插入
        1.先创建实体对象　　创建一个对象　利用对象进行操作　增删改查　user=Users()
        2.完成插入
            db.session.add(实体对象)
            是一个可操作的对象　当成一个事务　
            相当于依托这个事务进行增加操作　把要增加的实体对象放进去

            db.session.commit()　可以通过代码进行直接提交　app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN']=True

        2.  修改表结构，先进数据库修改　

        3.  数据库操作　－　查询　
            1.基于　db.session　进行查询　
                １．db.session.query()
                    该函数会返回一个Query对象，类型为BaseQuery
                    该对象中包含了实体类对应的表中的所有的数据

                    该函数可以接收一个或多个参数，参数们表示的是要查询的实体对象是谁　python类.属性名

                2.  查询执行函数
                    目的：　    在query()基础上得到最终想要的结果　
                    语法:      db.session.query(..).查询执行函数　

                        函数:                             说明

                        all()                        以列表的方式返回query()中所有查询的结果 是每一个行　也就是每一个对象　
                        first()                     返回查询结果中的第一个结果，如果没有结果的，则返回none
                        first_or_404()               返回查询结果中的第一个结果，如果没有结果，返回404
                        count()                         返回查询结果的数量

                3.  查询过滤器函数　
                    作用　：　在查询的基础上筛选部分行的数据　
                    语法　：　db.session.query(...).查询执行函数()  以列表的方式返回
                    过滤器函数　                      说明
                    filter()                        按指定条件进行过滤(多表，单表，定值，不定值)
                    filter_by()                     按等值条件过滤时使用
                    limit()                         按限制行数获取　
                    order_by                        根据指定条件进行排序　
                    group_by                        根据指定条件进行分组　

                    过滤器函数详解
                    1.filter()
                       注意　： 条件必须由　模型类，属性　构成　（避免多个模型类有相同的属性)
                        1.  查询年龄大于30的Users的信息　
                            db.session.query(Users).filter(Users.age > 30).执行函数()
                        2.  查询年龄大于25并且id大于1的Users的信息　
                            用逗号隔开多个条件

                        3.  查询年龄大于30或者id大于1的Users的信息　
                            注意　：　查询　或　的操作，借助于or_
                            db.session.query(Users).filter(or_(Users.age>30,Users.id>1)).all()

                        4.  查询年龄等于
                                等值判断必须用 ==

                        5．  查询email中包含　'w'的Users的信息，　－－　模糊查询
                                注意　like 需要使用实体类中属性提供的like()  notlike
                                db.session.query(Users).filter(Users.email.like('%w%')).all()

                        6.  查询包含　
                                实体类中属性提供的in_([])

                    2.  聚合函数  在mysql先分组在聚合　　 from sqlalchemy import func
                        func是方法　　
                        db.session.query(func.聚合函数(实体类.列名).label('别名')).all()

                    3.  filter_by()
                        查询　id=5的Users的信息
                        db.session.query(Users).filter_by(id=5).all()

                    4.  limit()
                        result = db.session.query(Users).limit(2)
                        result = db.session.query(Users).limit(2).offset(1) 偏移一条　从第二条开始　

                    5.  order_by()
                        #按照id列的值降序排序
                        db.session.query(Users).order_by('id desc').all()
                        #按照age列的值降序排序，二级排序按照id升序排序
                        db.session.query(Users).order_by('id desc,age desc').all()

                    6.  group_by()
                        一般会配合聚合
                        db.session.query(Users).group_by('age').all()
            2.基于　Models 类进行查询　





























