1   静态文件处理　不能跟服务器做静态交互的
    １．所有静态文件必须保存在static目录中，且在项目根目录下

    2. 所有静态文件的访问必须通过/static　告诉服务器　static目录中继续搜索剩余内容

1.  模板　
    １．静态文件地址的反向解析　 建议手写地址　不建议反向解析　
        'static'是写死的　不管static是不是rename
        url_for('static',filename='')
        ex:
            url_for

    2.  模板的继承　
        １．什么是模板的继承
            模板的继承类似于累的继承，
            如果一个模板中出现的内容来自于另一个模板的话，
            那么就可以使用继承的方式来简化开发

        ２．语法
            1.父模板
                需要定义出哪些东西在子模板中是可以被重写的
                {% block 块名 %}
                    父模板中正常显示的内容
                {% endblock %}

                block
                    1.在父模板中是可以正常显示的，没有任何影响
                    2.在子模板中是可以被重写的　

            ２．子模板
                1.  需要指定继承自哪个父模板　
                    {% extends '父模板名称' %}

                2.  重写父模板中对应的内容
                    {% block 块名　%}
                        此处编写的内容会覆盖掉父模板中同名block的内容

                    允许通过{{super()}}来调用父模板中的内容
                    {% endblock %}

利用css优先级调整　
max-width 

2   修改配置
    1.在构建Flask应用时允许指定的配置信息
        app=Flask(
            __name__,
            template_folder='muban',
            static_url_path = '/s',  访问静态资源的路径　
            static_folder = '/sta',

        )

        static_folder = '/sta', 存放静态文件的目录名称　
                                有一个名为sta的目录用于存放静态文件　

    ２．启动程序的运行配置
        app.run(
            debug = True,
            port = 5555,
            host = '0.0.0.0'

        )

        host : 指定启动地址　，'0.0.0.0' 表示局域网内的任何机器都可以访问网站

3   请求　request 和　响应　response

    1.  HTTP协议　
        Request Headers 请求消息头
        Response Headers 响应消息头



    2.  请求对象　－　request
        request - 请求对象，封装了所有与请求相关的信息　如：
            请求数据，请求消息头，请求路径.......

            在Flask中，要使用request 的话　，必须先导入　
            from flask import request

            request基本上在py里面写，再传参进网页　

        1.  request 的常用成员　
            1.scheme : 获取请求方案（协议）

            2.method : 获取本期请求的请求方式（重点）
                    if request.method == 'POST'
            3.args : 获取使用get请求方式提交的数据，

            4.form : 获取post请求方式提交的数据　 形成一个字典　

            5.cookies : 获取　cookies　的相关信息　

            6.headers : 获取　请求消息头的相关信息　

            7.files : 获取上传的文件　

            8.path : 获取请求的URL地址(进入到主机后的请求资源地址)

            9.full_path : 获取请求的URL地址（进入到主机后的请求资源地址，
                                            包含请求参数)

            10.url : 获取完整的请求地址，从协议开始的地方　


        2.  获取请求提交的数据
            1.  get 请求方式
                1.  表单允许实现get请求
                    <form action="跳转地址" method='get'>
                        <input name='uname' >
                    </form>

                2.  在请求地址后拼接请求提交的参数　
                    http://localhost:5000/06-get?uname=xxx&upwd=xxx

                request.args 获取使用get请求方式提交的数据　
                request.post 获取使用post请求方法提交的数据
                ImmutableMultiDict([('uname', 'asd'), ('upwd', 'dsadasd')])
                字典　可以用　request.args['uname']取值　

?是一个分隔符　表示后面的值　

            2.  post 请求方式
                post请求只有在表单中才能被触发
                <form method='post'>
                获取post请求提交的数据 :
                    request.form 封装的就是 post 请求的数据，类型为字典　

                    request.post['name'] : 获取name对应的值　
                    request.form.get['name'] : 获取name
                    request.form.getlist('name'): 获取name 列表数据（如复选框，下拉列表）

            route('/xxx',methods=['GET','POST'])
            需要加上method参数，才能允许浏览器访问


首先浏览器发送get请求，路由接收到url　找到对应的视觉函数　
如果有参数就传参进html 再由渲染转化成字符串到用户网页

用户网页用post请求，导入request request.form取值　需要的话可以传入
html文件　进行格式编排　，再由渲染函数传给用户浏览其　

import 'macro.html' as macros