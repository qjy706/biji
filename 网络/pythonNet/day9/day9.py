多线程并发　

threading Thread

多进程并发和多线程并发区别

多线程消耗资源较少　
线程应该更注意共享资源的操作　
在python中应该注意GIL问题，网络延迟较高，线程并发也是一种可行的办法

实现步骤　
　　　１　创建套接字　绑定监听　
　　　２　接收客户端请求，创建新的线程　
　　　３　主线程继续接受其他客户端连接
　　　４　分支线程启动对应的函数处理客户端请求
　　　５　当客户端断开，则分支线程结束　
　　　

import traceback 

traceback.print_exc() 跟try except 一起使用　
功能：　更详细的打印异常信息（哪个模块第几行出现的错误信息）


import trackback 
traceback.print_exc() 

trackback.print_exc()

集成模块的使用　

python2 SocketServer
python3 socketserver

功能: 通过模块的不同类的组合完成多进程／多进程的tcp/udp的并发　

主要目的是体验别人的模块的思维　




http请求　(request)
请求格式：

请求行 : 具体的请求类别和请求内容　
　　　　格式：　GET      　　　　　 /        　　　HTTP/1.1 
          请求类别　　　　　　请求内容　　　　　　　　协议版本

　　　请求类别：　　表示请求的种类　
　　　　　　　      GET   :    获取网络资源　　　　www.baidu.com 就是获取网络资源
             POST　　　　　　　提交一定的附加信息，得到返回结果
             HEAD　　　　　　　获取相应头
             PUT　　　　　　　　更新服务器资源
             DELETE　　　　　删除服务器资源
             CONNECT 　　　
             TRACE 　　　　　用于测试
             OPTIONS　　　　获取服务器性能信息

请求头　：  对请求内容的具体描述信息　（键值对形式）　

空行

请求体: 请求参数或者是提交内容　


http响应　(response)

响应格式



响应行　：　反馈相应的情况　
　　　　　格式：　HTTP/1.1        200       　　　　　ok 
　　　　　　　　　　　　协议　　　　　　　　　　　响应码　　　　　　　　附加信息

　　　　　响应码　：响应码的具体情况　
　　　　　　　　　　　　1xx : 提示信息，表示请求成功　
            2xx　：响应成功
            3xx　：响应需要重定向　
            4xx　：客户端错误　
            5xx　：服务端错误
    常见响应码：　２００　成功
    　　　　　　　　　　　４０４　请求内容不存在
    　　　　　　　　　　　４０１　没有访问权限
    　　　　　　　　　　　５００　服务器发生未知错误
    　　　　　　　　　　　５０３　暂时无法执行　

响应头　：对响应内容的具体描述　

空行　

响应体 : 返回给请求端的具体内容　




HTTP 2.0

１　接收客户端请求　
２　解析客户端请求　 splitlines()
３　组织数据，形成　HTTP response
４　将数据发送给客户端　


升级　

１　采用多线程并发接收多个客户端请求　

２　基本的请求解析，根据请求返回相应的内容

３　除了可以请求静态网页，也可以请求简单的数据　

４　将内容封装在一个类中 

技术点　

1 socket tcp 套接字　
２　http协议的请求响应格式　
３　线程并发的创建方法　
４　类的基本使用
!!!!!


协程基础　

定义　：　纤程　，微线程　协程的本质是一个单线程程序，所以协程不能够使用计算机多核资源　

作用：能够高效的完成并发任务，占用较少的资源　，因此协程的并发量较高　

原理：　（多路复用也是单进程　但是也并发了）

　　　　　　协程通过应用层的上下层栈区，实现在运行中进行上下文跳转
　　　　　　达到可以选择性的运行想要运行的部分，以此提高程序的运行效率　

上下层栈区　一个进程里面有类　函数　就叫做类栈区，函数栈区　　

在等你的函数里面不出现阻塞

优点：消耗资源少　
　　　　　无需切换开销　
　　　　　无需同步互斥　
　　　　　IO并发性好　


缺点：无法利用计算机多核　

yield --> 协程实现的基本关键字　

greenlet  
greenlet.greenlet() 生成协程对象



gevent 

1 将携程事件封装为函数　
２　生成协程对象　

　　　gevent.spawn(func,argv)#有一个形参　１，　有两个　１，２　
　　　功能：　生成协程对象　
　　　参数：　func  协程函数
      argv  给协程函数传参　
　　　返回值：　返回协程对象　


３　回收协程　
gevent.joinall([])
功能：　回收协程　
参数：　列表　将要回收的协程放入列表　

gevent.sleep(n)
功能：　设置携程阻塞　，让携程跳转　
参数：　n 阻塞时间　


from gevent import monkey 
monkey.patch_all()
功能：　修改套接字io阻塞行为

*必须在socket导入之前使用


达到并发效果 