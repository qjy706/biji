day16 
文件　file 
什么是文件　

文件是用于数据存储的单位
文件通常用来长期存储数据
文件中的数据是以字节（byte）为单位进行存储的　

文件的操作流程：
１，打开文件
２，读/写文件
３，关闭文件　
　　注：　任何操作系统，一个应用程序同时打开文件的数量有最大数限制

１。　打开文件
文件的打开函数　
open(file,mode=’rt’)用于打开一个文件，返回此文件对应的文件流对象，如果打开失败则会触发OSError错误　 用try 语句

文件的关闭方法：
Ｆ.close()  #　关闭文件，释放系统资源　

文本文件的操作：
文本文件的模式字符  ‘t’

说明：
１，对文本文件的读写需要用字符串str　进行读取和写入数据，
２，默认文件中存储的都是字符（文字）数据，在读写中会自动进行编码　　　　　转换操作
３，以行为单位分隔，在python内统一用’\n’用作换行符进行分隔

各操作系统的换行符

Linux 换行符　　’\n’
windows　换行符　　　’\r\n’
旧的macintosh换行符　　’\r’
新的mas os 换行符　’\n’

文件流对象常用的方法见：
文件.html　　　　　

文本文件读方法
f.readline()　　　一行
f.readlines()　　每一行用列表输出
f.readread(读取字符个数)
文本文件需要用到字符串进行读写操作　默认的存储的都是字符，


读写在一起　
input / output
文本文件写方法　
模式字符串　’w’
f.write(字符串)
f.writrlines(字符串列表）


f=open(‘my.txt’)  如果不写第二个参数　默认　 open(‘my.txt’,’rt’)


字符
含义
'r'
以只读方式打开(默认)
'w'
以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
'x'
创建一个新文件, 并以写模式打开这个文件,如果文件存在则会产生"FileExistsError"错误
'a'
以只写文件打开一个文件，如果有原文件则追加到文件末尾
'b'
用二进制模式打开
't'
文本文件模式打开 (默认)
'+'
为更新内容打开一个磁盘文件 (可读可写)
缺省模式是 'rt' 
'w+b' 可以实现二进制随机读写，当打开文件时，文件内容将被清零 
'r+b' 以二进制读和更新模式打开文件,打开文件时不会清空文件内容 
'r+' 以文本模式读和更新模式打开文件,打开文件时不会清空文件内容 
python 文件常用方法:
方法
说明
F.close()
关闭文件(关闭后文件不能再读写会发生ValueError错误)
F.readline()
读取一行数据, 如果到达文件尾则返回空行
F.readlines(max_chars=-1)
返回每行字符串的列表,max_chars为最大字符(或字节)数
F.writelines(lines)
将字符串的列表或字符串的列表中的内容写入文件


二进制文件操作方法

F.read(size=-1)
从一个文件流中最多读取size个字符(文本文件)或字节(二进制文件),如果不给出参数，则默认读取文件中全部的内容并返回
F.write(text)
写一个字符串到文件流中，返回写入的字符数(文本文件)或字节数(二进制文件)
F.tell()
返回当前文件流读写指针的绝对位置(字节为单位)
F.seek(offset, whence=0)
改变数据流读写指针的位置，返回新的绝对位置
F.flush()
把写入文件对象的缓存内容写入到磁盘


文件的迭代读取　
文件流对象是可迭代对象，迭代过程将以换行符’\n’作用分隔依次获取　（如果想要去掉，可以用s.rstrip()，右边空格去掉)

示例　
f=open(‘qjy.txt’,’rt’)
for line in f:       # f绑定的文件流对象是可迭代对象　 按\n进行分割
    print(line) 
hello

world

12312331abchello

world

123456

abcad

abc


练习　写程序，　读入任意行文字，当输入空行时结束输入　
先将这些读入的文字存入列表中，然后讲此列表里的内容存入input.txt中　

２，　写程序，　从上题的input。ｔｘｔ中读取之前输入的数据，读取到列表中，再加上行号进行输出  enumerate

def input_to_list():
    L=[]
    while True:
        s=input('请输入')
        if not s :
            break
        L.append(s)
    return L

def list_to_file(lst,filename='input.txt'):
    try:
        fw=open(filename,'w')
        for s in lst:  # 绑定的字符串写入到文件中
            fw.write(s)
            fw.write('\n')  #换行符号
        fw.close()
    except OSError:
        print('写入文件失败')
L=input_to_list()
list_to_file(L)      写入文件程序


标准输入输出文件

sys.stdin　标准输入文件（默认为键盘设备）
ctrl+d 标准输入文件　结束
sys.stdout　标准输出文件　（默认为屏幕终端）　print 默认的参数　
sys.stderr　标准错误输出文件　（默认为屏幕终端）
模块名　：　sys 

说明：
１．标准文件不需要打开和关闭就可以使用　
２，每一个python程序启动后都会有以上三个文件供我们使用





二进制文件操作　
操作字符:’b’
默认文件中存储的都是以字节为单位的数据，通常有人为的格式
对二进制文件的读写需要用到字节串bytes　进行操作　

常用的操作方法　
F.read([字节数/字节数])
　　对于文本文件，F.read（）返回类型为字节串ｓｔｒ
　　对于二进制文件，写入的数据为字节串bytes或bytearray
try:
    fr=open('my.txt','rb')  # 二进制读方式打开
    b=fr.read()   # b=b'abcd\n1234
    print(b)
    fr.close()


except OSError:
    print('打开二进制文件失败')

F.write(）
　　同上，对于二进制文件，写入的数据为字节串bytes或bytearray




 一个字节八个位　展现出来的是１６进制　高低电频互相转换　通常用１６进制来表示　



F.tell()方法，（只对二进制）
返回当前文件流的读写位置（从０开始，以字节为单位）

f.tell() 位置是字节在文件当中的id  一个英文字符占一个字节
f=open('my.txt','rb')# 文字流是可迭代对象　可以遍历
b=f.read(3)# 读取三个字节　b=f.read(4096) 读取超大文件可以用
print(b)
pos=f.tell()
print('当前光标位置是',pos)
b2=f.read(1)
print('当前光标位置是',f.tell())
f.close()


b'qqq'
当前光标位置是 3
当前光标位置是 4


F.seek方法　（只对二进制）
作用：
设置文件的读写位置　
格式：
F.seek（偏移量，whence-相对位置) 
   偏移量　
　　　　　大于０代表向文件尾方向移动
　　　　　小于０代表向文件头方向移动
　　相对位置
　　　　　０　代表从文件头开始偏移
　　　　　１　代表从当前位置开始偏移
　　　　　２　代表从文件尾开始偏移
f.seeK(5,0) # 代表从文件头向后移动５个字节


f.flush()


#f.flush()方法
# 缓冲是有大小的　，一般缓冲区填满才会显示　
# flush强制讲缓冲区内容吓到磁盘上
# f=open('my.txt','w')
# f.write('aaaaasxzcxzcaerqfdgfsqwqew')
一般会在缓存满的时候放进去　，用flush时候直接从缓存放完
# f.flush()

# s=input('请输入回车键继续')

# f.close()


汉字编码

问题　十个汉字占多少个字节？
２０个字节　　windows（gbk编码）　

３０个字节　　Ｌｉｎｕｘ（utf-8)
国标编码　
GB18030(二字节或四字节编码，２７５３３个字）
　　GBK(二字节编码　21003个字）
　　　GB2312(二字节编码, 6763个字) 
国际标准：
　　UNICODE ←---→   UTF-8(8-bit Unicode Transformation  Format)
(Linux/mac os /ios /android )


python的编码（encode)字符串　

‘gb2312’
‘gbk’
‘gb18030’
‘utf-8’



编码注释　
在源文件中第一行或第二行写入如下内容为编码注释

＃　-*-　coding:gbk -*-
设置源文件编码格式为gbk 

＃　-*- coding:utf-8 -*- 
设置源文件编码格式为：utf-8（window 上写的转到linux上执行　要转换编码　因为window是ｇｂｋ模式　）

作用　
告诉解释执行器，当前的.py文件的编码格式是什么　




