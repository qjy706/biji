# 递归函数
# 函数直接调用自身　
# 示例　
# def f():
#     print('从前有座山，山上有座庙，庙里有个老和尚讲故事')
#     f()    #直接调用自身
# print('开始将故事')
# f()
# print('递归完成')

# def fa():
#     fb()
# def fb():
#     fa()
# fa()
# print('递归完成')

# 限制递归层数的示例
# def fx(n):  n只等于一开始进去的数字　进去到fx(2) 那只等于２，打印进去　退出
# 每一此函数调用都会创建一个空间　函数每次调用会重头走　
# 函数调用结束之后，局部作用域就不存在了，
# 返回之前的函数作用域　，知道结束，整体是在一个大的作用域内



# 1,给出一个数n，写一个函数myfac(n来计算n!(n的阶乘）
# n!=1*2*3*4*5*6*n

# def myfac(n):
#     s=1
#     for i in range(1,(n+1)):
#         s *= i
#     return s
# n=int(input('请输入一个数字'))
# print(myfac(n))

#   用递归来实现
# def myfac(n):
#     if n == 1:
#         return 1
# #如果n不是１，则递推到下一级求解
#     return n * myfac(n-1)
# print(myfac(5))


# 练习　用递归实现求和　：
# def mysum(n):
#     if n == 1:
#         return 1　　　# 回归阶段
#     return n+mysum(n-1)  #递推阶段　　
#     # 返回１+２+３+４+５+，，n的和
# print(mysum(100))

# 已知有五位朋友在一起
# 第五个人说他比第四个人大两岁
# 第四个人说他比第三个人大两岁　
# 第三个人说他比第二个人大两岁
# 第二个人说他比第一个人大两岁
# 第一个人说它10岁
# 编写程序　
# 第五个人几岁
# 第三个人几岁

# def age(n):
#     if n == 1:
#         return 10
#     return age(n-1) + 2
# print(age(5))